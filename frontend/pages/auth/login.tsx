import Head from "next/head";
import { GetServerSideProps, NextPage } from "next";
import Login from "@/components/auth/Login";
import { useState } from "react";
import { useRouter } from "next/router";
import { wrapper } from "@/redux/store";
import { User } from "@/types";
import { setCurrentUser } from "@/redux/slices/auth";

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps((store) => async (context) => {
    const authToken = context.req.cookies?.token;

    if (authToken) {
      const authApiReq = await fetch(
        `http://${process.env.API_HOST}:${process.env.API_PORT}/api/auth/getTokenUser`,
        {
          method: "GET",
          headers: {
            Authorization: "Bearer " + authToken,
          },
        }
      );

      if (authApiReq.status == 200) {
        const currentUser = (await authApiReq.json()) as User;

        store.dispatch(setCurrentUser({ currentUser }));

        return {
          redirect: {
            permanent: false,
            destination: "/",
          },
        };
      }
    }

    return { props: {} };
  });

const LoginPage: NextPage = () => {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [errors, setErrors] = useState<string[]>([]);

  const router = useRouter();

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.currentTarget.value);
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.currentTarget.value);
  };

  const handleSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();

    const credentials = { email, password };

    try {
      const response = await fetch(
        `/api/auth/login`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(credentials),
        }
      );

      if (response.status === 200) {
        console.log("Giris Basarili")
        router.push("/arrivals");
      } else {
        const data = await response.json();

        if (data) {
          setErrors([data.message]);
        } else {
          setErrors([
            "Bilinmeyen bir hata oluştu. Lütfen daha sonra tekrar deneyin.",
          ]);
        }
      }
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <>
      <Head>
        <title>Giris Yap</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Login
        handleEmailChange={handleEmailChange}
        handlePasswordChange={handlePasswordChange}
        handleSubmit={handleSubmit}
        errors={errors}
      />
    </>
  );
};

export default LoginPage;
